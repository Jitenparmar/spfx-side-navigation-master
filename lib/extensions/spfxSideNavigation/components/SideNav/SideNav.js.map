{"version":3,"sources":["extensions/spfxSideNavigation/components/SideNav/SideNav.tsx"],"names":[],"mappings":"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","file":"extensions/spfxSideNavigation/components/SideNav/SideNav.js","sourcesContent":["import * as React from \"react\";\nimport { IconButton } from \"office-ui-fabric-react/lib/Button\";\nimport SideNavNode from \"./SideNavNode\";\nimport ISideNavItem from \"./model/ISideNavItem\";\nimport ISideNavProvider from \"./provider/ISideNavProvider\";\nimport SideNavProvider from \"./provider/SideNavProvider\";\nimport ISideNavProps from \"./ISideNavProps\";\nimport ISideNavState from \"./ISideNavState\";\n\nexport default class SideNav extends React.Component<\n  ISideNavProps,\n  ISideNavState\n> {\n  private sideNavProvider: ISideNavProvider;\n\n  constructor(props: ISideNavProps) {\n    super(props);\n    this.state = {\n      siteNavItems: [],\n      isOpened: false\n    };\n    window.addEventListener(\"click\", this.handleOutsideClick, true);\n  }\n\n  public componentWillMount(): void {\n    this.sideNavProvider = new SideNavProvider();\n  }\n\n  public componentDidMount(): void {\n    this.sideNavProvider.getSideNav().then((resultData: ISideNavItem[]): void =>{\n      this.sideNavProvider\n      .getSubSitesNav()\n      .then((result: ISideNavItem[]): void => {\n        resultData.push(...result);\n        this.setState({\n          siteNavItems: resultData\n        });\n      }).catch((error) => {\n        // console.log(error);\n      });      \n    });\n    \n      \n  }\n\n  public render(): JSX.Element {\n    const siteMenuClass: string = this.state.isOpened\n      ? \"site-menu opened\"\n      : \"site-menu\";\n    const toggleIconName: string = this.state.isOpened\n      ? \"DoubleChevronLeft8\"\n      : \"DoubleChevronRight8\";\n    return (\n      <div\n        className={`site-menu-panel ms-slideRightIn40 visible-i`}\n        style={{\n          visibility: \"hidden\"\n        }} /* set to hidden then onces css loads it will be visible */\n      >\n        <div className={siteMenuClass}>\n          <div className=\"menu-toggle\">\n            {\n              <IconButton\n                className=\"site-menu-icon\"\n                checked={false}\n                iconProps={{\n                  iconName: toggleIconName\n                }}\n                title=\"Toggle Menu\"\n                ariaLabel=\"Toggle Menu\"\n                onClick={this.toggleNav}\n              />\n            }\n          </div>\n\n          {this.state.siteNavItems.length > 0 &&\n            this.state.siteNavItems.map(this.renderSideNavNodes)}\n        </div>\n      </div>\n    );\n  }\n\n  private handleOutsideClick = (event: any) => {\n    if (!this.state.isOpened) { return; } // if site nav is already closed, abort\n\n    let foundSideNavPanel: boolean = false;\n    for (let i: number = 0; i < event.path.length; i++) {\n      const node: HTMLElement = event.path[i];\n      if (!node.className) { continue; } // skip if no class name\n      if (node.className.toLowerCase().indexOf(\"site-menu-panel\") !== -1) {\n        foundSideNavPanel = true;\n        break;\n      }\n    }\n\n    if (!foundSideNavPanel) {\n      this.toggleNav(); // if no site menu panel found, close the site menu\n    }\n  };\n\n  private toggleNav = (): void => {\n    this.setState((state, props) => ({\n      isOpened: !state.isOpened\n    }));\n  };\n\n  private renderSideNavNodes = (\n    siteNavItem: ISideNavItem,\n    index: number\n  ): JSX.Element => {\n    return (\n      <SideNavNode\n        key={index}\n        siteNavItem={siteNavItem}\n        navIsOpened={this.state.isOpened}\n      />\n    );\n  };\n}\n"],"sourceRoot":"..\\..\\..\\..\\..\\src"}